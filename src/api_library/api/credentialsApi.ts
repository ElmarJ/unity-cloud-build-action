/**
 * Unity Cloud Build
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on \'Cloud Build Preferences\' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Identifiers It should not be assumed that any of the identifiers used in paths will be a perfect match for your user-entered information. If you see unexpected 403s or 404s from API calls then check your identifiers match the ones used by the API. In particular, `projectId` does NOT typically change when the project is renamed and in fact may not be a direct match for the project name even at initial creation time.  To avoid confusion we recommend that instead of using the human-readable autogenerated orgId and projectId available from the API you should instead use:   * org foreign key for `orgId` (available from project APIs as `orgFk` and org APIs as `coreForeignKey`)   * `guid` for `projectId`  All links generated by the API and the Dashboard should follow this format already, making it easy to figure out the correct parameters by making a comparison.  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { InlineResponse20010 } from '../model/inlineResponse20010';
import { InlineResponse2008 } from '../model/inlineResponse2008';
import { InlineResponse2009 } from '../model/inlineResponse2009';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost/api/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CredentialsApiApiKeys {
}

export class CredentialsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apikey': new HttpBasicAuth(),
        'permissions': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CredentialsApiApiKeys, value: string) {
        (this.authentications as any)[CredentialsApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.apikey.username = username;
    }

    set password(password: string) {
        this.authentications.apikey.password = password;
    }

    set accessToken(token: string) {
        this.authentications.permissions.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Upload a new android keystore for the project. NOTE: you must be a manager in the project\'s organization to add new credentials. 
     * @summary Upload Android Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param label Label for the uploaded credential
     * @param file Keystore file
     * @param alias Keystore alias
     * @param keypass Keystore keypass
     * @param storepass Keystore storepass
     */
    public async addCredentialsAndroid (orgid: string, projectid: string, label: string, file: RequestFile, alias: string, keypass: string, storepass: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/android'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'keypass' is not null or undefined
        if (keypass === null || keypass === undefined) {
            throw new Error('Required parameter keypass was null or undefined when calling addCredentialsAndroid.');
        }

        // verify required parameter 'storepass' is not null or undefined
        if (storepass === null || storepass === undefined) {
            throw new Error('Required parameter storepass was null or undefined when calling addCredentialsAndroid.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;

        if (alias !== undefined) {
            localVarFormParams['alias'] = ObjectSerializer.serialize(alias, "string");
        }

        if (keypass !== undefined) {
            localVarFormParams['keypass'] = ObjectSerializer.serialize(keypass, "string");
        }

        if (storepass !== undefined) {
            localVarFormParams['storepass'] = ObjectSerializer.serialize(storepass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload a new android keystore for an organization. NOTE: you must be a manager in the organization to add new credentials. 
     * @summary Upload Android Credentials
     * @param orgid Organization identifier
     * @param label Label for the uploaded credential
     * @param file Keystore file
     * @param alias Keystore alias
     * @param keypass Keystore keypass
     * @param storepass Keystore storepass
     */
    public async addCredentialsAndroidForOrg (orgid: string, label: string, file: RequestFile, alias: string, keypass: string, storepass: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/android'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        // verify required parameter 'keypass' is not null or undefined
        if (keypass === null || keypass === undefined) {
            throw new Error('Required parameter keypass was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        // verify required parameter 'storepass' is not null or undefined
        if (storepass === null || storepass === undefined) {
            throw new Error('Required parameter storepass was null or undefined when calling addCredentialsAndroidForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;

        if (alias !== undefined) {
            localVarFormParams['alias'] = ObjectSerializer.serialize(alias, "string");
        }

        if (keypass !== undefined) {
            localVarFormParams['keypass'] = ObjectSerializer.serialize(keypass, "string");
        }

        if (storepass !== undefined) {
            localVarFormParams['storepass'] = ObjectSerializer.serialize(storepass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project\'s organization to add new credentials. 
     * @summary Upload iOS Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param label Label for the uploaded credentials
     * @param fileCertificate Certificate file (.p12)
     * @param fileProvisioningProfile Provisioning Profile (.mobileprovision)
     * @param certificatePass Certificate (.p12) password
     */
    public async addCredentialsIos (orgid: string, projectid: string, label: string, fileCertificate: RequestFile, fileProvisioningProfile: RequestFile, certificatePass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/ios'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsIos.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling addCredentialsIos.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsIos.');
        }

        // verify required parameter 'fileCertificate' is not null or undefined
        if (fileCertificate === null || fileCertificate === undefined) {
            throw new Error('Required parameter fileCertificate was null or undefined when calling addCredentialsIos.');
        }

        // verify required parameter 'fileProvisioningProfile' is not null or undefined
        if (fileProvisioningProfile === null || fileProvisioningProfile === undefined) {
            throw new Error('Required parameter fileProvisioningProfile was null or undefined when calling addCredentialsIos.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (fileCertificate !== undefined) {
            localVarFormParams['fileCertificate'] = fileCertificate;
        }
        localVarUseFormData = true;

        if (fileProvisioningProfile !== undefined) {
            localVarFormParams['fileProvisioningProfile'] = fileProvisioningProfile;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload a new iOS certificate and provisioning profile for the organization. NOTE: you must be a manager in the organization to add new credentials. 
     * @summary Upload iOS Credentials for organization
     * @param orgid Organization identifier
     * @param label Label for the uploaded credentials
     * @param fileCertificate Certificate file (.p12)
     * @param fileProvisioningProfile Provisioning Profile (.mobileprovision)
     * @param certificatePass Certificate (.p12) password
     */
    public async addCredentialsIosForOrg (orgid: string, label: string, fileCertificate: RequestFile, fileProvisioningProfile: RequestFile, certificatePass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/ios'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsIosForOrg.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsIosForOrg.');
        }

        // verify required parameter 'fileCertificate' is not null or undefined
        if (fileCertificate === null || fileCertificate === undefined) {
            throw new Error('Required parameter fileCertificate was null or undefined when calling addCredentialsIosForOrg.');
        }

        // verify required parameter 'fileProvisioningProfile' is not null or undefined
        if (fileProvisioningProfile === null || fileProvisioningProfile === undefined) {
            throw new Error('Required parameter fileProvisioningProfile was null or undefined when calling addCredentialsIosForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (fileCertificate !== undefined) {
            localVarFormParams['fileCertificate'] = fileCertificate;
        }
        localVarUseFormData = true;

        if (fileProvisioningProfile !== undefined) {
            localVarFormParams['fileProvisioningProfile'] = fileProvisioningProfile;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload a new OSX certificate and provisioning profile for the project. NOTE: you must be a manager in the project\'s organization to add new credentials. 
     * @summary Upload OSX Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param label Label for the uploaded credentials
     * @param certificate Certificate file (.p12)
     * @param appleIdUsername Apple ID Username
     * @param appleIdPassword Apple ID Password
     * @param certificatePass Certificate (.p12) password
     * @param entitlementsFile Entitlements File (.entitlements)
     * @param providerName Provider Name
     */
    public async addCredentialsOsx (orgid: string, projectid: string, label: string, certificate: RequestFile, appleIdUsername: string, appleIdPassword: string, certificatePass?: string, entitlementsFile?: RequestFile, providerName?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/osx'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsOsx.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling addCredentialsOsx.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsOsx.');
        }

        // verify required parameter 'certificate' is not null or undefined
        if (certificate === null || certificate === undefined) {
            throw new Error('Required parameter certificate was null or undefined when calling addCredentialsOsx.');
        }

        // verify required parameter 'appleIdUsername' is not null or undefined
        if (appleIdUsername === null || appleIdUsername === undefined) {
            throw new Error('Required parameter appleIdUsername was null or undefined when calling addCredentialsOsx.');
        }

        // verify required parameter 'appleIdPassword' is not null or undefined
        if (appleIdPassword === null || appleIdPassword === undefined) {
            throw new Error('Required parameter appleIdPassword was null or undefined when calling addCredentialsOsx.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (certificate !== undefined) {
            localVarFormParams['certificate'] = certificate;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        if (entitlementsFile !== undefined) {
            localVarFormParams['entitlementsFile'] = entitlementsFile;
        }
        localVarUseFormData = true;

        if (providerName !== undefined) {
            localVarFormParams['providerName'] = ObjectSerializer.serialize(providerName, "string");
        }

        if (appleIdUsername !== undefined) {
            localVarFormParams['appleIdUsername'] = ObjectSerializer.serialize(appleIdUsername, "string");
        }

        if (appleIdPassword !== undefined) {
            localVarFormParams['appleIdPassword'] = ObjectSerializer.serialize(appleIdPassword, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload a new OSX certificate and provisioning profile for the organization. NOTE: you must be a manager in the organization to add new credentials. 
     * @summary Upload OSX Credentials for organization
     * @param orgid Organization identifier
     * @param label Label for the uploaded credentials
     * @param certificate Certificate file (.p12)
     * @param appleIdUsername Apple ID Username
     * @param appleIdPassword Apple ID Password
     * @param certificatePass Certificate (.p12) password
     * @param entitlementsFile Entitlements file (.entitlements)
     * @param providerName Provider Name
     */
    public async addCredentialsOsxForOrg (orgid: string, label: string, certificate: RequestFile, appleIdUsername: string, appleIdPassword: string, certificatePass?: string, entitlementsFile?: RequestFile, providerName?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/osx'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addCredentialsOsxForOrg.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling addCredentialsOsxForOrg.');
        }

        // verify required parameter 'certificate' is not null or undefined
        if (certificate === null || certificate === undefined) {
            throw new Error('Required parameter certificate was null or undefined when calling addCredentialsOsxForOrg.');
        }

        // verify required parameter 'appleIdUsername' is not null or undefined
        if (appleIdUsername === null || appleIdUsername === undefined) {
            throw new Error('Required parameter appleIdUsername was null or undefined when calling addCredentialsOsxForOrg.');
        }

        // verify required parameter 'appleIdPassword' is not null or undefined
        if (appleIdPassword === null || appleIdPassword === undefined) {
            throw new Error('Required parameter appleIdPassword was null or undefined when calling addCredentialsOsxForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (certificate !== undefined) {
            localVarFormParams['certificate'] = certificate;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        if (entitlementsFile !== undefined) {
            localVarFormParams['entitlementsFile'] = entitlementsFile;
        }
        localVarUseFormData = true;

        if (providerName !== undefined) {
            localVarFormParams['providerName'] = ObjectSerializer.serialize(providerName, "string");
        }

        if (appleIdUsername !== undefined) {
            localVarFormParams['appleIdUsername'] = ObjectSerializer.serialize(appleIdUsername, "string");
        }

        if (appleIdPassword !== undefined) {
            localVarFormParams['appleIdPassword'] = ObjectSerializer.serialize(appleIdPassword, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific android credentials for a project. NOTE: you must be a manager in the project\'s organization to delete credentials. 
     * @summary Delete Android Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async deleteAndroid (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteAndroid.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling deleteAndroid.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteAndroid.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific android credentials for an organization. NOTE: you must be a manager in the organization to delete credentials. 
     * @summary Delete Android Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async deleteAndroidForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteAndroidForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteAndroidForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific ios credentials for a project. NOTE: you must be a manager in the project\'s organization to delete credentials. 
     * @summary Delete iOS Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async deleteIos (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteIos.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling deleteIos.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteIos.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific ios credentials. NOTE: you must be a manager in the project\'s organization to delete credentials. 
     * @summary Delete iOS Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async deleteIosForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteIosForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteIosForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific OSX credentials for a project. NOTE: you must be a manager in the project\'s organization to delete credentials. 
     * @summary Delete OSX Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async deleteOsx (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteOsx.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling deleteOsx.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteOsx.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete specific OSX credentials. NOTE: you must be a manager in the project\'s organization to delete credentials. 
     * @summary Delete OSX Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async deleteOsxForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteOsxForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling deleteOsxForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
     * @summary Get All Android Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     */
    public async getAllAndroid (orgid: string, projectid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2008>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/android'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllAndroid.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getAllAndroid.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2008>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2008>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the organization. A list of projects using a credential is included in the links element. 
     * @summary Get All Android Credentials for an organization
     * @param orgid Organization identifier
     */
    public async getAllAndroidForOrg (orgid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2008>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/android'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllAndroidForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2008>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2008>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
     * @summary Get All iOS Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     */
    public async getAllIos (orgid: string, projectid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2009>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/ios'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllIos.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getAllIos.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2009>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2009>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
     * @summary Get All iOS Credentials for an oganization
     * @param orgid Organization identifier
     */
    public async getAllIosForOrg (orgid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2009>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/ios'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllIosForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2009>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2009>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
     * @summary Get All OSX Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     */
    public async getAllOsx (orgid: string, projectid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse20010>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/osx'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllOsx.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getAllOsx.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse20010>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse20010>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
     * @summary Get All OSX Credentials for an oganization
     * @param orgid Organization identifier
     */
    public async getAllOsxForOrg (orgid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse20010>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/osx'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getAllOsxForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse20010>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse20010>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific android credential details
     * @summary Get Android Credential Details
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async getOneAndroid (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneAndroid.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getOneAndroid.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneAndroid.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific organization android credential details
     * @summary Get Android Credential Details for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async getOneAndroidForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneAndroidForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneAndroidForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific iOS credential details
     * @summary Get iOS Credential Details
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async getOneIos (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneIos.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getOneIos.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneIos.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific iOS credential details
     * @summary Get iOS Credential Details for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async getOneIosForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneIosForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneIosForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific OSX credential details
     * @summary Get OSX Credential Details
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     */
    public async getOneOsx (orgid: string, projectid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneOsx.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getOneOsx.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneOsx.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get specific OSX credential details
     * @summary Get OSX Credential Details for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     */
    public async getOneOsxForOrg (orgid: string, credentialid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getOneOsxForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling getOneOsxForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an android keystore for the project. NOTE: you must be a manager in the project\'s organization to add new credentials. 
     * @summary Update Android Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     * @param label Label for the uploaded credential
     * @param file Keystore file
     * @param alias Keystore alias
     * @param keypass Keystore keypass
     * @param storepass Keystore storepass
     */
    public async updateAndroid (orgid: string, projectid: string, credentialid: string, label?: string, file?: RequestFile, alias?: string, keypass?: string, storepass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateAndroid.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling updateAndroid.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateAndroid.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;

        if (alias !== undefined) {
            localVarFormParams['alias'] = ObjectSerializer.serialize(alias, "string");
        }

        if (keypass !== undefined) {
            localVarFormParams['keypass'] = ObjectSerializer.serialize(keypass, "string");
        }

        if (storepass !== undefined) {
            localVarFormParams['storepass'] = ObjectSerializer.serialize(storepass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an android keystore for the organization. NOTE: you must be a manager in the organization to update credentials. 
     * @summary Update Android Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     * @param label Label for the uploaded credential
     * @param file Keystore file
     * @param alias Keystore alias
     * @param keypass Keystore keypass
     * @param storepass Keystore storepass
     */
    public async updateAndroidForOrg (orgid: string, credentialid: string, label?: string, file?: RequestFile, alias?: string, keypass?: string, storepass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/android/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateAndroidForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateAndroidForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;

        if (alias !== undefined) {
            localVarFormParams['alias'] = ObjectSerializer.serialize(alias, "string");
        }

        if (keypass !== undefined) {
            localVarFormParams['keypass'] = ObjectSerializer.serialize(keypass, "string");
        }

        if (storepass !== undefined) {
            localVarFormParams['storepass'] = ObjectSerializer.serialize(storepass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project\'s organization to update credentials. 
     * @summary Update iOS Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     * @param label Label for the updated credentials
     * @param fileCertificate Certificate file (.p12)
     * @param fileProvisioningProfile Provisioning Profile (.mobileprovision)
     * @param certificatePass Certificate (.p12) password
     */
    public async updateIos (orgid: string, projectid: string, credentialid: string, label?: string, fileCertificate?: RequestFile, fileProvisioningProfile?: RequestFile, certificatePass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateIos.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling updateIos.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateIos.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (fileCertificate !== undefined) {
            localVarFormParams['fileCertificate'] = fileCertificate;
        }
        localVarUseFormData = true;

        if (fileProvisioningProfile !== undefined) {
            localVarFormParams['fileProvisioningProfile'] = fileProvisioningProfile;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an iOS certificate / provisioning profile. NOTE: you must be a manager in the project\'s organization to update credentials. 
     * @summary Update iOS Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     * @param label Label for the updated credentials
     * @param fileCertificate Certificate file (.p12)
     * @param fileProvisioningProfile Provisioning Profile (.mobileprovision)
     * @param certificatePass Certificate (.p12) password
     */
    public async updateIosForOrg (orgid: string, credentialid: string, label?: string, fileCertificate?: RequestFile, fileProvisioningProfile?: RequestFile, certificatePass?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/ios/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateIosForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateIosForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (fileCertificate !== undefined) {
            localVarFormParams['fileCertificate'] = fileCertificate;
        }
        localVarUseFormData = true;

        if (fileProvisioningProfile !== undefined) {
            localVarFormParams['fileProvisioningProfile'] = fileProvisioningProfile;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an OSX certificate / provisioning profile for the project. NOTE: you must be a manager in the project\'s organization to update credentials. 
     * @summary Update OSX Credentials
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param credentialid Credential Identifier
     * @param label Label for the updated credentials
     * @param certificate Certificate file (.p12)
     * @param certificatePass Certificate (.p12) password
     * @param entitlementsFile Entitlements File (.entitlements)
     * @param providerName Provider Name
     * @param appleIdUsername Apple ID Username
     * @param appleIdPassword Apple ID Password
     */
    public async updateOsx (orgid: string, projectid: string, credentialid: string, label?: string, certificate?: RequestFile, certificatePass?: string, entitlementsFile?: RequestFile, providerName?: string, appleIdUsername?: string, appleIdPassword?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateOsx.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling updateOsx.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateOsx.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (certificate !== undefined) {
            localVarFormParams['certificate'] = certificate;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        if (entitlementsFile !== undefined) {
            localVarFormParams['entitlementsFile'] = entitlementsFile;
        }
        localVarUseFormData = true;

        if (providerName !== undefined) {
            localVarFormParams['providerName'] = ObjectSerializer.serialize(providerName, "string");
        }

        if (appleIdUsername !== undefined) {
            localVarFormParams['appleIdUsername'] = ObjectSerializer.serialize(appleIdUsername, "string");
        }

        if (appleIdPassword !== undefined) {
            localVarFormParams['appleIdPassword'] = ObjectSerializer.serialize(appleIdPassword, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an OSX certificate / provisioning profile. NOTE: you must be a manager in the project\'s organization to update credentials. 
     * @summary Update OSX Credentials for organization
     * @param orgid Organization identifier
     * @param credentialid Credential Identifier
     * @param label Label for the updated credentials
     * @param certificate Certificate file (.p12)
     * @param certificatePass Certificate (.p12) password
     * @param entitlementsFile Entitlements File (.entitlements)
     * @param providerName Provider Name
     * @param appleIdUsername Apple ID Username
     * @param appleIdPassword Apple ID Password
     */
    public async updateOsxForOrg (orgid: string, credentialid: string, label?: string, certificate?: RequestFile, certificatePass?: string, entitlementsFile?: RequestFile, providerName?: string, appleIdUsername?: string, appleIdPassword?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/credentials/signing/osx/{credentialid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'credentialid' + '}', encodeURIComponent(String(credentialid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateOsxForOrg.');
        }

        // verify required parameter 'credentialid' is not null or undefined
        if (credentialid === null || credentialid === undefined) {
            throw new Error('Required parameter credentialid was null or undefined when calling updateOsxForOrg.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (certificate !== undefined) {
            localVarFormParams['certificate'] = certificate;
        }
        localVarUseFormData = true;

        if (certificatePass !== undefined) {
            localVarFormParams['certificatePass'] = ObjectSerializer.serialize(certificatePass, "string");
        }

        if (entitlementsFile !== undefined) {
            localVarFormParams['entitlementsFile'] = entitlementsFile;
        }
        localVarUseFormData = true;

        if (providerName !== undefined) {
            localVarFormParams['providerName'] = ObjectSerializer.serialize(providerName, "string");
        }

        if (appleIdUsername !== undefined) {
            localVarFormParams['appleIdUsername'] = ObjectSerializer.serialize(appleIdUsername, "string");
        }

        if (appleIdPassword !== undefined) {
            localVarFormParams['appleIdPassword'] = ObjectSerializer.serialize(appleIdPassword, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
