/**
 * Unity Cloud Build
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on \'Cloud Build Preferences\' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Identifiers It should not be assumed that any of the identifiers used in paths will be a perfect match for your user-entered information. If you see unexpected 403s or 404s from API calls then check your identifiers match the ones used by the API. In particular, `projectId` does NOT typically change when the project is renamed and in fact may not be a direct match for the project name even at initial creation time.  To avoid confusion we recommend that instead of using the human-readable autogenerated orgId and projectId available from the API you should instead use:   * org foreign key for `orgId` (available from project APIs as `orgFk` and org APIs as `coreForeignKey`)   * `guid` for `projectId`  All links generated by the API and the Dashboard should follow this format already, making it easy to figure out the correct parameters by making a comparison.  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { InlineObject6 } from '../model/inlineObject6';
import { InlineObject7 } from '../model/inlineObject7';
import { InlineResponse2007 } from '../model/inlineResponse2007';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost/api/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BuildtargetsApiApiKeys {
}

export class BuildtargetsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apikey': new HttpBasicAuth(),
        'permissions': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: BuildtargetsApiApiKeys, value: string) {
        (this.authentications as any)[BuildtargetsApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.apikey.username = username;
    }

    set password(password: string) {
        this.authentications.apikey.password = password;
    }

    set accessToken(token: string) {
        this.authentications.permissions.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Create build target for a project
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param options 
     */
    public async addBuildTarget (orgid: string, projectid: string, options: InlineObject6, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling addBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling addBuildTarget.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling addBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(options, "InlineObject6")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Delete build target
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     */
    public async deleteBuildTarget (orgid: string, projectid: string, buildtargetid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling deleteBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling deleteBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling deleteBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Get a build target
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     */
    public async getBuildTarget (orgid: string, projectid: string, buildtargetid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling getBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets all configured build targets for a project, regardless of whether they are enabled. Add \"?include=settings,credentials\" as a query parameter to include the build target settings and credentials with the response. 
     * @summary List all build targets for a project
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param include Extra fields to include in the response
     * @param includeLastSuccess Include last successful build
     */
    public async getBuildTargets (orgid: string, projectid: string, include?: string, includeLastSuccess?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2007>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getBuildTargets.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getBuildTargets.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "string");
        }

        if (includeLastSuccess !== undefined) {
            localVarQueryParameters['include_last_success'] = ObjectSerializer.serialize(includeLastSuccess, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2007>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2007>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets all configured build targets for an org, regardless of whether they are enabled. Add \"?include=settings,credentials\" as a query parameter to include the build target settings and credentials with the response. 
     * @summary List all build targets for an org
     * @param orgid Organization identifier
     * @param include Extra fields to include in the response
     * @param includeLastSuccess Include last successful build
     */
    public async getBuildTargetsForOrg (orgid: string, include?: string, includeLastSuccess?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2007>;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/buildtargets'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getBuildTargetsForOrg.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "string");
        }

        if (includeLastSuccess !== undefined) {
            localVarQueryParameters['include_last_success'] = ObjectSerializer.serialize(includeLastSuccess, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<InlineResponse2007>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<InlineResponse2007>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all configured environment variables for a given build target
     * @summary Get environment variables
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     */
    public async getEnvVariablesForBuildTarget (orgid: string, projectid: string, buildtargetid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: { [key: string]: string; };  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getEnvVariablesForBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getEnvVariablesForBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling getEnvVariablesForBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: { [key: string]: string; };  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "{ [key: string]: string; }");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get statistics for the specified build target
     * @summary Get build target statistics
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     * @param buildStatus Query for only builds of a specific status
     * @param cleanBuild Query for builds that have either been built clean or using caches
     * @param limit Get stats for last limit builds
     */
    public async getStatsForBuildTarget (orgid: string, projectid: string, buildtargetid: string, buildStatus?: string, cleanBuild?: boolean, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/stats'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling getStatsForBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling getStatsForBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling getStatsForBuildTarget.');
        }

        if (buildStatus !== undefined) {
            localVarQueryParameters['buildStatus'] = ObjectSerializer.serialize(buildStatus, "string");
        }

        if (cleanBuild !== undefined) {
            localVarQueryParameters['cleanBuild'] = ObjectSerializer.serialize(cleanBuild, "boolean");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Set all configured environment variables for a given build target
     * @summary Set environment variables
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     * @param envvars Environment variables
     */
    public async setEnvVariablesForBuildTarget (orgid: string, projectid: string, buildtargetid: string, envvars: { [key: string]: string; }, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: { [key: string]: string; };  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling setEnvVariablesForBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling setEnvVariablesForBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling setEnvVariablesForBuildTarget.');
        }

        // verify required parameter 'envvars' is not null or undefined
        if (envvars === null || envvars === undefined) {
            throw new Error('Required parameter envvars was null or undefined when calling setEnvVariablesForBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(envvars, "{ [key: string]: string; }")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: { [key: string]: string; };  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "{ [key: string]: string; }");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Update build target details
     * @param orgid Organization identifier
     * @param projectid Project identifier
     * @param buildtargetid unique id auto-generated from the build target name
     * @param options 
     */
    public async updateBuildTarget (orgid: string, projectid: string, buildtargetid: string, options: InlineObject7, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}'
            .replace('{' + 'orgid' + '}', encodeURIComponent(String(orgid)))
            .replace('{' + 'projectid' + '}', encodeURIComponent(String(projectid)))
            .replace('{' + 'buildtargetid' + '}', encodeURIComponent(String(buildtargetid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain', 'text/html', 'text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'orgid' is not null or undefined
        if (orgid === null || orgid === undefined) {
            throw new Error('Required parameter orgid was null or undefined when calling updateBuildTarget.');
        }

        // verify required parameter 'projectid' is not null or undefined
        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling updateBuildTarget.');
        }

        // verify required parameter 'buildtargetid' is not null or undefined
        if (buildtargetid === null || buildtargetid === undefined) {
            throw new Error('Required parameter buildtargetid was null or undefined when calling updateBuildTarget.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling updateBuildTarget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(options, "InlineObject7")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey.username && this.authentications.apikey.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.permissions.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.permissions.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
